= DESCRIPTION:
An LWRP that can be used to fetch files from S3.

I created this LWRP to solve the chicken-and-egg problem of fetching files from S3 on the first Chef run on a newly provisioned machine. Ruby libraries that are installed on that first run are not available to Chef during the run, so I couldn't use a library like Fog to get what I needed from S3.

This LWRP has no dependencies beyond the Ruby standard library, so it can be used on the first run of Chef.

= REQUIREMENTS:
An Amazon Web Services account and something in S3 to fetch.

Multi-part S3 uploads do not put the MD5 of the content in the ETag header. If x-amz-meta-digest is provided in User-Defined Metadata on the S3 Object it is processed as if it were a Digest header (RFC 3230).

The MD5 of the local file will be checked against the MD5 from x-amz-meta-digest if it is present.  It not it will check against the ETag.  If there is no match or the local file is absent it will be downloaded.

If credentials are not provided, s3_file will attempt to use the first instance profile associated with the instance. See documentation at http://docs.aws.amazon.com/IAM/latest/UserGuide/instance-profiles.html for more on instance profiles.

= USAGE:
s3_file acts like other file resources.  The only supported action is :create, which is the default.

Attribute Parameters:

* `aws_access_key_id` - your AWS access key id. (optional)
* `aws_secret_access_key` - your AWS secret access key. (optional)
* `token` - token used for temporary IAM credentials. (optional)
* `bucket` - the bucket to pull from.
* `remote_path` - the S3 key to pull.
* `owner` - the owner of the file. (optional)
* `group` - the group owner of the file. (optional)
* `mode` - the octal mode of the file. (optional)

Example:

    s3_file "/tmp/somefile" do
    	remote_path "/my/s3/key"
    	bucket "my-s3-bucket"
    	aws_access_key_id "mykeyid"
    	aws_secret_access_key "mykey"
    	owner "me"
    	group "mygroup"
    	mode "0644"
    	action :create
    end
	
= MD5 and Multi-Part Upload:
s3_file compares the MD5 hash of a local file, if present, and the ETag header of the S3 object.  If they do not match, then the remote object will be downloaded and notifiations will be fired.

In most cases, the ETag of an S3 object will be identical to its MD5 hash.  However, if the file was uploaded to S3 via multi-part upload, then the ETag will be set to the MD5 hash of the first uploaded part.  In these cases, MD5 of the local file and remote object will never match.

To work around this issue, set an X-Amz-Meta-Digest tag on your S3 object with value set to `md5=MD5 of the entire object`.  s3_file will then use that value in place of the ETag value, and will skip downloading in case the MD5 of the local file matches the value of the X-Amz-Meta-Digest header.
